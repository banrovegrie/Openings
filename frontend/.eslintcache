[{"/home/alapan/Documents/Projects/Openings/frontend/src/index.js":"1","/home/alapan/Documents/Projects/Openings/frontend/src/components/SignIn.js":"2","/home/alapan/Documents/Projects/Openings/frontend/src/components/R_SignUp.js":"3","/home/alapan/Documents/Projects/Openings/frontend/src/components/A_SignUp.js":"4","/home/alapan/Documents/Projects/Openings/frontend/src/store.js":"5","/home/alapan/Documents/Projects/Openings/frontend/src/components/A_Dashboard.js":"6","/home/alapan/Documents/Projects/Openings/frontend/src/components/A_Profile.js":"7","/home/alapan/Documents/Projects/Openings/frontend/src/components/A_Applications.js":"8","/home/alapan/Documents/Projects/Openings/frontend/src/components/R_Profile.js":"9","/home/alapan/Documents/Projects/Openings/frontend/src/components/R_CreateJob.js":"10","/home/alapan/Documents/Projects/Openings/frontend/src/components/R_Dashboard.js":"11","/home/alapan/Documents/Projects/Openings/frontend/src/components/R_JobApplicants.js":"12"},{"size":1517,"mtime":1611668944264,"results":"13","hashOfConfig":"14"},{"size":4750,"mtime":1611157361541,"results":"15","hashOfConfig":"14"},{"size":5454,"mtime":1611088286439,"results":"16","hashOfConfig":"14"},{"size":8843,"mtime":1611088234508,"results":"17","hashOfConfig":"14"},{"size":74,"mtime":1611084752902,"results":"18","hashOfConfig":"14"},{"size":12015,"mtime":1611657733630,"results":"19","hashOfConfig":"14"},{"size":11633,"mtime":1611178908053,"results":"20","hashOfConfig":"14"},{"size":12202,"mtime":1611578984821,"results":"21","hashOfConfig":"14"},{"size":8965,"mtime":1611674544407,"results":"22","hashOfConfig":"14"},{"size":12978,"mtime":1611674468494,"results":"23","hashOfConfig":"14"},{"size":12699,"mtime":1611674383299,"results":"24","hashOfConfig":"14"},{"size":11221,"mtime":1611674273467,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},"10fkk0p",{"filePath":"30","messages":"31","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"29"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"29"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"29"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"29"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"29"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"29"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"29"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"29"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"29"},"/home/alapan/Documents/Projects/Openings/frontend/src/index.js",["61","62","63","64","65","66","67","68","69"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SignIn from './components/SignIn'\nimport R_SignUp from './components/R_SignUp'\nimport A_SignUp from './components/A_SignUp'\nimport A_Dashboard from './components/A_Dashboard'\nimport A_Profile from './components/A_Profile'\nimport A_Applications from './components/A_Applications'\nimport R_Profile from './components/R_Profile'\nimport R_CreateJob from './components/R_CreateJob'\nimport R_Dashboard from './components/R_Dashboard'\nimport R_JobApplicants from './components/R_JobApplicants'\nimport { /*Link,*/ BrowserRouter as Router, Route} from 'react-router-dom';\n\nReactDOM.render(\n  <Router>\n    \n    <Route path='/' exact>\n      <SignIn />\n    </Route>\n    \n    <Route path='/sign-up-recruiter' exact>\n      <R_SignUp />\n    </Route>\n    \n    <Route path='/sign-up-applicant' exact>\n      <A_SignUp />\n    </Route>\n\n    <Route path='/dashboard-applicant' exact>\n      <A_Dashboard />\n    </Route>\n\n    <Route path='/profile-applicant' exact>\n      <A_Profile />\n    </Route>\n\n    <Route path='/applications-applicant' exact>\n      <A_Applications />\n    </Route>\n\n    <Route path='/profile-recruiter' exact>\n      <R_Profile />\n    </Route>\n\n    <Route path='/createjob-recruiter' exact>\n      <R_CreateJob />\n    </Route>\n\n    <Route path='/dashboard-recruiter' exact>\n      <R_Dashboard />\n    </Route>\n\n    <Route path='/recruiter/job_applications' exact>\n      <R_JobApplicants />\n    </Route>\n\n  </Router>,\n  document.getElementById('root')\n);",["70","71"],"/home/alapan/Documents/Projects/Openings/frontend/src/components/SignIn.js",["72","73","74","75","76","77"],"import { React, useState, useEffect } from 'react';\nimport {\n  Avatar, Button, makeStyles, Container, TextField,\n  Typography, Box, CssBaseline, FormControlLabel, Checkbox,\n  Link, Grid, StylesProvider\n} from '@material-ui/core';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport { BrowserRouter as Router, Redirect, Route, useHistory} from 'react-router-dom';\nimport axios from 'axios';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%',\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function SignIn() {\n  const classes = useStyles();\n  const history = useHistory();\n\n  sessionStorage.setItem('globalID', '0');\n  console.log(sessionStorage.getItem('globalID'));\n  let [login, setLogin] = useState(\n    {\n      email: ' ',\n      password: ' '\n    }\n  );  \n\n  const handleSubmit = event => {\n    event.preventDefault();\n    axios.get('http://localhost:5000/applicants')\n      .then(res => {\n        const loginData = res.data;\n        console.log(loginData);\n        loginData.forEach(log => {\n          if (log.email === login.email && log.password === login.password)\n          {\n            sessionStorage.setItem('globalID', log._id);\n            console.log(sessionStorage.getItem('globalID'));\n            history.push('/dashboard-applicant');\n          }\n        });\n        const globalID = sessionStorage.getItem('globalID');\n        console.log(globalID);\n      })\n      .catch(err => console.log(err));\n\n    if (sessionStorage.getItem('globalID') !== '0');\n    else\n    {\n      axios.get('http://localhost:5000/recruiters')\n        .then(res => {\n          const loginData = res.data;\n          console.log(loginData);\n          loginData.forEach(log => {\n            if (log.email === login.email && log.password === login.password)\n            {\n              sessionStorage.setItem('globalID', log._id);\n              console.log(sessionStorage.getItem('globalID'));\n              history.push('/dashboard-recruiter');\n            }\n          });\n          const globalID = sessionStorage.getItem('globalID');\n          console.log(globalID);\n        })\n        .catch(err => console.log(err));\n\n      if (sessionStorage.getItem('globalID') !== '0');\n      else\n        history.push('/');\n    }\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign in\n        </Typography>\n        <form className={classes.form} \n          noValidate\n          onSubmit={handleSubmit}\n        >\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"email\"\n            label=\"Email Address\"\n            name=\"email\"\n            autoComplete=\"email\"\n            autoFocus\n            onChange = {event => {\n              setLogin(login = {\n                email: event.target.value, \n                password: login.password\n              });\n              console.log(login);\n            }}\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            id=\"password\"\n            autoComplete=\"current-password\"\n            onChange = {event => {\n              setLogin(login = {\n                email: login.email, \n                password: event.target.value\n              });\n              console.log(login);\n            }}\n          />\n          <FormControlLabel\n            control={<Checkbox value=\"remember\" color=\"primary\" />}\n            label=\"Remember me\"\n          />\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            Sign In\n          </Button>\n          <Grid container>\n            <Grid item xs>\n              <Link href=\"/sign-up-recruiter\" variant=\"body2\">\n                {\"Sign Up as Recruiter\"}\n              </Link>\n            </Grid>\n            <Grid item>\n              <Link href=\"/sign-up-applicant\" variant=\"body2\">\n                {\"Sign Up as Applicant\"}\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n    </Container>\n  );\n}","/home/alapan/Documents/Projects/Openings/frontend/src/components/R_SignUp.js",["78","79","80"],"import React, { useState } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport axios from 'axios';\nimport { useHistory } from 'react-router';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function R_SignUp() {\n  const classes = useStyles();\n  const history = useHistory();\n\n  sessionStorage.setItem('globalID', '0');\n\n  let [signup, setSignup] = useState(\n    {\n      name: ' ',\n      password: ' ',\n      email: ' ',\n      contact: ' ',\n      bio: ' '\n    }\n  );\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    axios.post('http://localhost:5000/recruiters/add', signup)\n      .then(response => {\n        console.log(response);\n        history.push('/');\n      })\n      .catch(err => console.log(err));\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign up\n        </Typography>\n        <form className={classes.form} \n          noValidate\n          onSubmit={handleSubmit}\n        >\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"Name\"\n                label=\"Name\"\n                name=\"Name\"\n                autoComplete=\"name\"\n                onChange = {event => {\n                  setSignup(signup = {\n                    ...signup,\n                    name: event.target.value\n                  });\n                  console.log(signup);\n                }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                autoComplete=\"email\"\n                onChange = {event => {\n                  setSignup(signup = {\n                    ...signup,\n                    email: event.target.value\n                  });\n                  console.log(signup);\n                }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"current-password\"\n                onChange = {event => {\n                  setSignup(signup = {\n                    ...signup,\n                    password: event.target.value\n                  });\n                  console.log(signup);\n                }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"contact\"\n                label=\"Contact\"\n                type=\"number\"\n                id=\"contact\"\n                autoComplete=\"contact\"\n                onChange = {event => {\n                  setSignup(signup = {\n                    ...signup,\n                    contact: event.target.value\n                  });\n                  console.log(signup);\n                }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"bio\"\n                label=\"Bio\"\n                id=\"bio\"\n                onChange = {event => {\n                  setSignup(signup = {\n                    ...signup,\n                    bio: event.target.value\n                  });\n                  console.log(signup);\n                }}\n              />\n            </Grid>\n          </Grid>\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            Sign Up\n          </Button>\n          <Grid container justify=\"flex-end\">\n            <Grid item>\n              <Link href=\"/\" variant=\"body2\">\n                Already have an account? Sign in\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n    </Container>\n  );\n}","/home/alapan/Documents/Projects/Openings/frontend/src/components/A_SignUp.js",["81","82","83","84","85","86","87","88"],"import { React, useState, useEffect } from 'react';\nimport {\n  Avatar, Button, makeStyles, Container, TextField,\n  Typography, Box, CssBaseline, FormControlLabel, Checkbox,\n  Link, Grid, StylesProvider\n} from '@material-ui/core';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport { BrowserRouter as Router, Redirect, Route, useHistory} from 'react-router-dom';\nimport axios from 'axios';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%',\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function A_SignUp() {\n  const classes = useStyles();\n  const history = useHistory();\n\n  sessionStorage.setItem('globalID', '0');\n\n  let [signup, setSignup] = useState(\n    {\n      name: \" \",\n      email: \" \",\n      password: \" \",\n      education:\n      {\n        institute: \" \",\n        start_year: \" \",\n        end_year: \" \"\n      },\n      skills: [\"haskell\", \"cpp\", \"python\"]\n    }\n  );\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    axios.post('http://localhost:5000/applicants/add', signup)\n      .then(response => {\n        console.log(response);\n        history.push('/');\n      })\n      .catch(err => console.log(err));\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign up\n        </Typography>\n        <form className={classes.form} \n          noValidate\n          onSubmit={handleSubmit}\n        >\n          <Grid container spacing={2}>\n          <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"Name\"\n                label=\"Name\"\n                name=\"Name\"\n                autoComplete=\"name\"\n                onChange = {event => {\n                  setSignup(signup = {\n                    name: event.target.value,\n                    email: signup.email,\n                    password: signup.password,\n                    education:\n                    {\n                        institute: signup.education.institute,\n                        start_year: signup.education.start_year,\n                        end_year: signup.education.start_year\n                    },\n                    skills: signup.skills\n                  });\n                  console.log(signup);\n                }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                autoComplete=\"email\"\n                onChange = {event => {\n                  setSignup(signup = {\n                    name: signup.name,\n                    email: event.target.value,\n                    password: signup.password,\n                    education:\n                    {\n                        institute: signup.education.institute,\n                        start_year: signup.education.start_year,\n                        end_year: signup.education.start_year\n                    },\n                    skills: signup.skills\n                  });\n                  console.log(signup);\n                }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"current-password\"\n                onChange = {event => {\n                  setSignup(signup = {\n                    name: signup.name,\n                    email: signup.email,\n                    password: event.target.value,\n                    education:\n                    {\n                        institute: signup.education.institute,\n                        start_year: signup.education.start_year,\n                        end_year: signup.education.start_year\n                    },\n                    skills: signup.skills\n                  });\n                  console.log(signup);\n                }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n            <TextField\n              variant=\"outlined\"\n              required\n              fullWidth\n              name=\"institute\"\n              label=\"Institute\"\n              id=\"institute\"\n              onChange = {event => {\n                setSignup(signup = {\n                  name: signup.name,\n                  email: signup.email,\n                  password: signup.password,\n                  education:\n                  {\n                      institute: event.target.value,\n                      start_year: signup.education.start_year,\n                      end_year: signup.education.start_year\n                  },\n                  skills: signup.skills\n                });\n                console.log(signup);\n              }}\n            />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n            <TextField\n              id=\"start_year\"\n              label=\"Start\"\n              type=\"date\"\n              //defaultValue=\"2001-01-01\"\n              className={classes.textField}\n              InputLabelProps={{\n                shrink: true,\n              }}\n              onChange = {event => {\n                setSignup(signup = {\n                  name: signup.name,\n                  email: signup.email,\n                  password: signup.password,\n                  education:\n                  {\n                      institute: signup.education.institute,\n                      start_year: event.target.value,\n                      end_year: signup.education.start_year\n                  },\n                  skills: signup.skills\n                });\n                console.log(signup);\n              }}\n            />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n            <TextField\n              id=\"end_year\"\n              label=\"End\"\n              type=\"date\"\n              //defaultValue=\"2005-01-01\"\n              className={classes.textField}\n              InputLabelProps={{\n                shrink: true,\n              }}\n              onChange = {event => {\n                setSignup(signup = {\n                  name: signup.name,\n                  email: signup.email,\n                  password: signup.password,\n                  education:\n                  {\n                      institute: signup.education.institute,\n                      start_year: signup.education.start_year,\n                      end_year: event.target.value\n                  },\n                  skills: signup.skills\n                });\n                console.log(signup);\n              }}\n            />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"skills\"\n                label=\"Skills (comma separated)\"\n                id=\"skills\"\n                defaultValue=\"haskell, cpp, python\"\n                onChange = {event => {\n                  let str = event.target.value;\n                  let arr = str.split(',').map(element => element.trim())\n                  setSignup(signup = {\n                    name: signup.name,\n                    email: signup.email,\n                    password: signup.password,\n                    education:\n                    {\n                        institute: signup.education.institute,\n                        start_year: signup.education.start_year,\n                        end_year: signup.education.start_year\n                    },\n                    skills: arr\n                  });\n                  console.log(signup);\n                }}\n              />\n            </Grid>\n          </Grid>\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            Sign Up\n          </Button>\n          <Grid container justify=\"flex-end\">\n            <Grid item>\n              <Link href=\"/\" variant=\"body2\">\n                Already have an account? Sign in\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n    </Container>\n  );\n}","/home/alapan/Documents/Projects/Openings/frontend/src/store.js",["89"],"/home/alapan/Documents/Projects/Openings/frontend/src/components/A_Dashboard.js",["90","91","92"],"import { React, useState } from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { \n  Drawer, CssBaseline, AppBar,\n  Toolbar, List, Typography,\n  Divider, IconButton, ListItem,\n  ListItemIcon, ListItemText, \n  Button, Paper, Grid, Dialog,\n  TextField, DialogActions,\n  DialogContent, DialogContentText,\n  DialogTitle, TextareaAutosize\n} from '@material-ui/core';\nimport LockIcon from '@material-ui/icons/Lock';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport NaturePeopleIcon from '@material-ui/icons/NaturePeople';\nimport AssignmentTurnedInIcon from '@material-ui/icons/AssignmentTurnedIn';\nimport axios from 'axios';\nimport Rating from '@material-ui/lab/Rating';\nimport { BrowserRouter as Router, useHistory } from 'react-router-dom';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0, 1),\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-end',\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: -drawerWidth,\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: 0,\n  },\n}));\n\nconst useStyles2 = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    '& > *': {\n      width: \"100%\",\n    },\n  },\n  paperContent: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n    marginLeft: theme.spacing(5),\n    marginRight: theme.spacing(5),\n  },\n}));\n\nconst useStyles3 = makeStyles((theme) =>({\n  root: {\n    minWidth: 800,\n  }\n}));\n\nexport default function PersistentDrawerLeft() {\n  const classes = useStyles();\n  const classes2 = useStyles2();\n  const classes3 = useStyles3();\n\n  const theme = useTheme();\n  const [open, setOpen] = useState(false);\n\n  const history = useHistory();\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const [jobData, setJobData] = useState([]);\n  const [toAxios, setToAxios] = useState(true);\n\n  if (toAxios)\n  {\n    axios.get('http://localhost:5000/jobs')\n      .then(res => {\n        setJobData(res.data);\n        setToAxios(false)\n      });\n    console.log(jobData);\n  }\n\n  console.log('globalID ' + sessionStorage.getItem('globalID'));\n\n  const [openApply, setOpenApply] = useState(false);\n\n  const handleClickOpen = (job) => {\n    setOpenApply(true);\n    setApplyJob({\n      id: \" \",\n      name: \" \",\n      email: \" \",\n      sop: \" \"\n    });\n    setApplicantJob({\n      id: job._id,\n      title: job.title,\n      email: job.recruiter.email\n    });\n  };\n\n  const handleApplyClose = () => {\n    setOpenApply(false);\n  };\n\n  const [applyJob, setApplyJob] = useState({\n    id: \" \",\n    name: \" \",\n    email: \" \",\n    sop: \" \"\n  });\n\n  const [applicantJob, setApplicantJob] = useState({\n    id: \" \",\n    title: \" \",\n    email: \" \",\n  });\n\n  const handleMakeApply = () => {\n    //event.preventDefault();\n    console.log(\"Job\", applyJob);\n    console.log(\"applicantJob in handle\", applicantJob);\n\n    axios.post(`http://localhost:5000/jobs/apply/${applicantJob.id}`, applyJob)\n      .then(response => {\n        console.log(response);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n    axios.post(`http://localhost:5000/applicants/apply/${sessionStorage.getItem('globalID')}`, applicantJob)\n      .then(response => {\n        console.log(response);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n    \n    axios.post(`http://localhost:5000/jobs/update/status/${applicantJob.id}/${sessionStorage.getItem('globalID')}`, {\n      status: \"Applied\"\n    })\n      .then(response => {\n        console.log(response);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n    \n    axios.post(`http://localhost:5000/applicants/update/status/${sessionStorage.getItem('globalID')}/${applicantJob.id}`, {\n      status: \"Applied\"\n    })\n      .then(response => {\n        console.log(response);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n    handleApplyClose();\n    window.location.reload({forcedReload: false});\n  };\n\n  const makeApplyButton = job => {\n    if (job?.max_number_of_applications <= job?.applications?.length) {\n      return (\n        <Button variant=\"contained\" disabled>\n          Full\n        </Button>\n      );\n    }\n    else if (job?.max_number_of_positions <= job?.applications?.reduce(function(previousValue, currentObject) {\n        return previousValue + (currentObject?.status?.substring(0, 3) === \"Acc\" ? 1: 0); \n      }, 0)) {\n      return (\n        <Button variant=\"contained\" disabled>\n          Full\n        </Button>\n      );\n    }\n    for (let i = 0; i < job?.applications?.length; i += 1) {\n      if (sessionStorage.getItem('globalID') === job?.applications[i]?.id) {\n        return (\n          <Button variant=\"contained\" style={{backgroundColor: '#d4ebf2'}} disabled>\n            Applied\n          </Button>\n        );\n      }\n    }\n    return (\n      <div>\n      <Button variant=\"contained\" color=\"secondary\"\n        onClick={() => {handleClickOpen(job)}}\n      >\n        Apply\n      </Button>\n      <Dialog open={openApply} onClose={handleApplyClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">Apply</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            To apply to this job, please enter the following details and click Apply.\n          </DialogContentText>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id={`name ${job._id}`}\n            label=\"Name\"\n            type=\"string\"\n            fullWidth\n            onChange={event => {\n              setApplyJob({\n                ...applyJob,\n                id: sessionStorage.getItem('globalID'),\n                name: event.target.value\n              });\n            }}\n          />\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id={`email ${job._id}`}\n            label=\"Email Address\"\n            type=\"string\"\n            fullWidth\n            onChange={event => {\n              setApplyJob({\n                ...applyJob,\n                email: event.target.value\n              })\n            }}\n          />\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id={`sop ${job._id}`}\n            label=\"Statement of Purpose\"\n            multiline\n            fullWidth\n            onChange={event => {\n              setApplyJob({\n                ...applyJob,\n                sop: event.target.value\n              })\n            }}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleApplyClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleMakeApply} color=\"secondary\">\n            Apply\n          </Button>\n        </DialogActions>\n      </Dialog>\n      </div>\n    );\n  }\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, open && classes.hide)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            Dashboard\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          <ListItem button key=\"profile\"\n            onClick={() => {\n              history.push('/profile-applicant');\n            }}\n          >\n            <ListItemIcon><NaturePeopleIcon /></ListItemIcon>\n            <ListItemText primary=\"My Profile\" />\n          </ListItem>\n          <ListItem button key=\"my_applications\"\n            onClick={() => {\n              history.push('/applications-applicant');\n            }}\n          >\n            <ListItemIcon><AssignmentTurnedInIcon /></ListItemIcon>\n            <ListItemText primary=\"My Applications\" />\n          </ListItem>\n        </List>\n        <Divider />\n        <List>\n            <ListItem button key='logout' \n              onClick={() => {\n                sessionStorage.setItem('globalID', '0');\n                history.push('/');\n              }}\n            >\n              <ListItemIcon><LockIcon /></ListItemIcon>\n              <ListItemText primary='Logout' />\n            </ListItem>\n        </List>\n      </Drawer>\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open,\n        })}\n      >\n        <div className={classes.drawerHeader} />\n\n        <Grid container className={classes3.root} spacing={4}>\n        {jobData?.map(job => {\n          return (\n            <Grid key={job._id} item>\n              <Paper elevation={6} style={{minWidth: 750}}>\n                <span style={{margin: '2rem'}}>\n                <div className={classes2.paperContent}>\n                  <h1>{job.title}</h1>\n                  <Rating name=\"read-only\" value={job.total_rating/job.total_number_of_ratings} readOnly />\n                  <h2>{job.recruiter.name}, {job.recruiter.email}</h2>\n                  <Typography variant={'subtitle1'}>Job Requirements</Typography>\n                  <ul>\n                    <li>Deadline: {(new Date(job.deadline)).toDateString()}</li>\n                    <li>Type of Job: {job.type_of_job}</li>\n                    <li>Duration: {job.duration} Months</li>\n                    <li>Skills Required: {job.skills.join(\", \")}</li>\n                  </ul>\n                  <Typography variant={'subtitle1'}>Further Job Details</Typography>\n                  <ul>\n                    <li>Positions Open: {job.max_number_of_positions}</li>\n                    <li>Maximum Applications (intaking): {job.max_number_of_applications}</li>\n                    <li>Salary: {job.salary}</li>\n                  </ul>\n                  <Grid container justify=\"flex-end\">\n                    {\n                      makeApplyButton(job)\n                    }\n                  </Grid>\n                </div>\n                </span>\n              </Paper>\n            </Grid>\n          )\n        })}\n        </Grid>\n      </main>\n    </div>\n  );\n}","/home/alapan/Documents/Projects/Openings/frontend/src/components/A_Profile.js",["93","94","95","96","97","98","99","100","101","102"],"import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport {\n  Drawer, CssBaseline, AppBar,\n  Toolbar, List, Typography,\n  Divider, IconButton, ListItem,\n  ListItemIcon, ListItemText,\n  Button, Paper, Container, Grid,\n  Avatar, TextField, Box, Link,\n  Checkbox, FormControlLabel\n} from '@material-ui/core';\nimport LockIcon from '@material-ui/icons/Lock';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport NaturePeopleIcon from '@material-ui/icons/NaturePeople';\nimport AssignmentTurnedInIcon from '@material-ui/icons/AssignmentTurnedIn';\nimport axios from 'axios';\nimport Rating from '@material-ui/lab/Rating';\nimport { BrowserRouter as Router, useHistory } from 'react-router-dom';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0, 1),\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-end',\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: -drawerWidth,\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: 0,\n  },\n}));\n\nconst useStyles2 = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    '& > *': {\n      width: \"100%\",\n    },\n  },\n  paperContent: {\n    marginTop: theme.spacing(5),\n    marginBottom: theme.spacing(5),\n    marginLeft: theme.spacing(4),\n    marginRight: theme.spacing(4),\n  },\n}));\n\nconst useStyles3 = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.primary.main,\n  },\n  form: {\n    width: '100%',\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nconst Profile = () => {\n  const classes = useStyles3();\n\n  const [profileData, setProfileData] = useState([]);\n  const [toGetAxios, setToGetAxios] = useState(true);\n  \n  const [updateData, setUpdateData] = useState({\n      education:  {\n        institute: \" \",\n        start_year: \"2000-02-02\",\n        end_year: \"2000-02-02\",\n      },\n      skills: []\n    }\n  );\n\n  if (toGetAxios)\n  {\n    axios.get(`http://localhost:5000/applicants/${sessionStorage.getItem('globalID')}`)\n      .then(res => {\n        setProfileData(res.data);\n        setToGetAxios(false);\n        setUpdateData({\n            education:  {\n              institute: profileData?.education?.institute,\n              start_year: profileData?.education?.start_year,\n              end_year: profileData?.education?.end_year,\n            },\n            skills: profileData?.skills\n        })\n      });\n    console.log(profileData);\n    console.log(profileData?.skills?.join(\", \"));\n  }\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    console.log(updateData);\n    axios.post(`http://localhost:5000/applicants/update/${sessionStorage.getItem('globalID')}`, updateData)\n      .then(response => console.log(response))\n      .catch(err => console.log(err));\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <AccountCircleIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          {profileData?.name}\n        </Typography>\n        <Typography component=\"h3\" variant=\"subtitle1\">\n          {profileData?.email}\n        </Typography>\n        <br/>\n        <Rating name=\"read-only\" value={profileData?.total_rating/profileData?.total_number_of_ratings} readOnly />\n        <form className={classes.form}\n          noValidate\n          onSubmit={handleSubmit}\n        >\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"institute\"\n                label=\"Institute\"\n                id=\"institute\"\n                value={`${updateData?.education?.institute}`}\n                onChange = {event => {\n                  setUpdateData({\n                    education:  {\n                      institute: event.target.value,\n                      start_year: updateData?.education?.start_year,\n                      end_year: updateData?.education?.end_year,\n                    },\n                    skills: updateData?.skills\n                  })\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                id=\"start_year\"\n                label=\"Start\"\n                type=\"date\"\n                className={classes.textField}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                value={\n                  `${updateData?.education?.start_year?.substring(0, 10) \n                    == undefined ? \n                    \"2000-02-02\" : updateData?.education?.start_year?.substring(0, 10)\n                  }`\n                }\n                onChange = {event => {\n                  setUpdateData({\n                    education:  {\n                      institute: updateData?.education?.institute,\n                      start_year: event.target.value,\n                      end_year: updateData?.education?.end_year,\n                    },\n                    skills: updateData?.skills\n                  })\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                id=\"end_year\"\n                label=\"End\"\n                type=\"date\"\n                className={classes.textField}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                value={\n                  `${updateData?.education?.end_year?.substring(0, 10)\n                    == undefined ? \n                    \"2000-02-02\" : updateData?.education?.end_year?.substring(0, 10)\n                  }`\n                }\n                onChange = {event => {\n                  setUpdateData({\n                    education:  {\n                      institute: updateData?.education?.institute,\n                      start_year: updateData?.education?.start_year,\n                      end_year: event.target.value,\n                    },\n                    skills: updateData?.skills\n                  })\n                }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"skills\"\n                label=\"Skills (comma separated)\"\n                id=\"skills\"\n                value={`${updateData?.skills?.join(\", \")}`}\n                onChange = {event => {\n                  setUpdateData({\n                    education:  {\n                      institute: updateData?.education?.institute,\n                      start_year: updateData?.education?.start_year,\n                      end_year: updateData?.education?.end_year,\n                    },\n                    skills: event.target.value.split(',').map(element => element.trim())\n                  })\n                }}\n              />\n            </Grid>\n          </Grid>\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            Update\n          </Button>\n        </form>\n      </div>\n    </Container>\n  );\n};\n\nexport default function PersistentDrawerLeft() {\n  const classes = useStyles();\n  const classes2 = useStyles2();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n\n  const history = useHistory();\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  console.log('globalID = ' + sessionStorage.getItem('globalID'));\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, open && classes.hide)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            My Profile\n            {/*Dashboard, My Profile, My Applications*/}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          <ListItem button key=\"dashboard\"\n            onClick={() => {\n              history.push('/dashboard-applicant');\n            }}\n          >\n            <ListItemIcon><DashboardIcon /></ListItemIcon>\n            <ListItemText primary=\"Dashboard\" />\n          </ListItem>\n          <ListItem button key=\"my_applications\"\n            onClick={() => {\n              history.push('/applications-applicant');\n            }}\n          >\n            <ListItemIcon><AssignmentTurnedInIcon /></ListItemIcon>\n            <ListItemText primary=\"My Applications\" />\n          </ListItem>\n        </List>\n        <Divider />\n        <List>\n          <ListItem button key='logout'\n            onClick={() => {\n              sessionStorage.setItem('globalID', '0');\n              history.push('/');\n            }}\n          >\n            <ListItemIcon><LockIcon /></ListItemIcon>\n            <ListItemText primary='Logout' />\n          </ListItem>\n        </List>\n      </Drawer>\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open,\n        })}\n      >\n        <div className={classes.drawerHeader} />\n        \n        <Profile />\n\n      </main>\n    </div>\n  );\n}","/home/alapan/Documents/Projects/Openings/frontend/src/components/A_Applications.js",["103","104","105"],"import { React, useState } from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport {\n  Drawer, CssBaseline, AppBar,\n  Toolbar, List, Typography,\n  Divider, IconButton, ListItem,\n  ListItemIcon, ListItemText,\n  Button, Paper, Grid, Popover\n} from '@material-ui/core';\nimport LockIcon from '@material-ui/icons/Lock';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport NaturePeopleIcon from '@material-ui/icons/NaturePeople';\nimport Rating from '@material-ui/lab/Rating'\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport SaveIcon from '@material-ui/icons/Save';\nimport AssignmentTurnedInIcon from '@material-ui/icons/AssignmentTurnedIn';\nimport axios from 'axios';\nimport { BrowserRouter as Router, useHistory } from 'react-router-dom';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0, 1),\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-end',\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: -drawerWidth,\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: 0,\n  },\n}));\n\nconst useStyles2 = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    '& > *': {\n      width: \"100%\",\n    },\n  },\n  paperContent: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n    marginLeft: theme.spacing(5),\n    marginRight: theme.spacing(5),\n  },\n}));\n\nconst useStyles3 = makeStyles((theme) => ({\n  root: {\n    minWidth: 800,\n  }\n}));\n\nexport default function PersistentDrawerLeft() {\n  const classes = useStyles();\n  const classes2 = useStyles2();\n  const classes3 = useStyles3();\n\n  const theme = useTheme();\n  const [open, setOpen] = useState(false);\n\n  const history = useHistory();\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const [applicationsData, setApplicationsData] = useState([]);\n  const [jobData, setJobData] = useState([]);\n  const [toAxios, setToAxios] = useState(true);\n  const [toAxios2, setToAxios2] = useState(true);\n\n  if (toAxios) \n  {\n    axios.get(`http://localhost:5000/applicants/${sessionStorage.getItem('globalID')}`)\n      .then(res => {\n        setApplicationsData(res.data);\n        setToAxios(false)\n      });\n    console.log(applicationsData);\n    console.log(applicationsData.applications);\n  }\n\n  if (toAxios2)\n  {\n    axios.get('http://localhost:5000/jobs')\n      .then(res => {\n        setJobData(res.data);\n        setToAxios2(false)\n      });\n    console.log(jobData);\n  }\n\n  console.log('globalID ' + sessionStorage.getItem('globalID'));\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [rateValue, setRateValue] = useState(0);\n  const [jobRateDetails, setJobRateDetails] = useState({\n    id: \" \",\n    total_rating: 0,\n    total_number_of_ratings: 0\n  });\n\n  const handleClick = (event, job) => {\n    setAnchorEl(event.currentTarget);\n    setRateValue(0);\n    setJobRateDetails({\n      id: job._id,\n      total_rating: job.total_rating,\n      total_number_of_ratings: job.total_number_of_ratings\n    });\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const openRate = Boolean(anchorEl);\n\n  const handleRateSave = (event, val) => {\n    event.preventDefault();\n    console.log(val);\n    console.log(jobRateDetails);\n    \n    axios.post(`http://localhost:5000/jobs/rating/update/${jobRateDetails.id}`, {\n      total_rating: (jobRateDetails.total_rating + val),\n\t    total_number_of_ratings: (jobRateDetails.total_number_of_ratings + 1)\n    })\n      .then(response => {\n        console.log(response);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n      \n    axios.post(`http://localhost:5000/applicants/update/status/${sessionStorage.getItem('globalID')}/${jobRateDetails.id}`, {\n      status: `Accepted and Rated ${val}/5`\n    })\n      .then(response => {\n        console.log(response);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  \n    handleClose();\n    window.location.reload({forcedReload: false});\n  };\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, open && classes.hide)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            My Applications\n            {/*Dashboard, My Profile, My Applications*/}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          <ListItem button key=\"dashboard\"\n            onClick={() => {\n              history.push('/dashboard-applicant');\n            }}\n          >\n            <ListItemIcon><DashboardIcon /></ListItemIcon>\n            <ListItemText primary=\"Dashboard\" />\n          </ListItem>\n          <ListItem button key=\"profile\"\n            onClick={() => {\n              history.push('/profile-applicant');\n            }}\n          >\n            <ListItemIcon><NaturePeopleIcon /></ListItemIcon>\n            <ListItemText primary=\"My Profile\" />\n          </ListItem>\n        </List>\n        <Divider />\n        <List>\n          <ListItem button key='logout'\n            onClick={() => {\n              sessionStorage.setItem('globalID', '0');\n              history.push('/');\n            }}\n          >\n            <ListItemIcon><LockIcon /></ListItemIcon>\n            <ListItemText primary='Logout' />\n          </ListItem>\n        </List>\n      </Drawer>\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open,\n        })}\n      >\n        <div className={classes.drawerHeader} />\n        <Grid container className={classes3.root} spacing={4}>\n        {applicationsData?.applications?.map(app => {\n          \n          for (let i = 0; i < jobData.length; i++)\n          {\n            if (app.id === jobData[i]._id){\n              return (\n                <Grid key={jobData[i]._id} item>\n                  <Paper elevation={6} style={{minWidth: 750}}>\n                    <span style={{margin: '2rem'}}>\n                    <div className={classes2.paperContent}>\n                      <h1>{jobData[i].title}</h1>\n                      <Rating name=\"read-only\" value={jobData[i]?.total_rating/jobData[i]?.total_number_of_ratings} readOnly />\n                      <h3>{`${jobData[i].recruiter.name}`}</h3>\n                      <Typography variant={'subtitle1'}>\n                        <ul>\n                          <li>Connect: {jobData[i].recruiter.email}</li>\n                          <li>Salary: {jobData[i].salary}</li>\n                          <li>Date of Joining: {\"NIL\"}</li>\n                          <li>Rating: {jobData[i]?.total_rating/jobData[i]?.total_number_of_ratings}</li>\n                        </ul>\n                      </Typography>\n                      <Grid container justify=\"flex-end\">\n                        {\n                          //Applied, Shortlisted, Accepted, Rejected, Rated\n                          (app.status === \"Accepted\")?\n                          <div>\n                          <Button variant=\"contained\" style={{backgroundColor: '#ffbf00'}}>\n                            {app.status}\n                          </Button>\n                          &nbsp;\t&nbsp;\n                          <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={(event) => handleClick(event, jobData[i])}\n                            startIcon={<ThumbUpIcon />}\n                          >\n                            Click to Rate\n                          </Button>\n                          <Popover\n                            id={app.id}\n                            open={openRate}\n                            anchorEl={anchorEl}\n                            onClose={handleClose}\n                            anchorOrigin={{\n                              vertical: 'bottom',\n                              horizontal: 'center',\n                            }}\n                            transformOrigin={{\n                              vertical: 'top',\n                              horizontal: 'center',\n                            }}\n                          >\n                            <span style={{\n                                display: \"flex\",\n                                justifyContent: \"center\",\n                                alignItems: \"center\",\n                                margin: '0.5rem'\n                              }}\n                            >\n                              <Rating\n                                name=\"simple-controlled\"\n                                value={rateValue}\n                                onChange={(event, newValue) => {\n                                  setRateValue(newValue);\n                                }}\n                              />\n                              <IconButton id={app.id} aria-label=\"submit\" color=\"primary\"\n                                onClick={(event) => handleRateSave(event, rateValue)}\n                              >\n                                <SaveIcon />\n                              </IconButton>\n                            </span>\n                          </Popover>\n                          </div>\n                          :\n                          <div>\n                          <Button variant=\"contained\" color=\"primary\">\n                            {app.status}\n                          </Button>\n                          &nbsp;\t&nbsp;\n                          <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            disabled\n                            onClick={handleClick}\n                            startIcon={<ThumbUpIcon />}\n                          >\n                            Click to Rate\n                          </Button>\n                          </div>\n                        }\n                      </Grid>\n                    </div>\n                    </span>\n                  </Paper>\n                </Grid>\n              )\n            }\n          }\n        })}\n        </Grid>\n      </main>\n    </div>\n  );\n}","/home/alapan/Documents/Projects/Openings/frontend/src/components/R_Profile.js",["106","107","108","109","110","111","112","113"],"/home/alapan/Documents/Projects/Openings/frontend/src/components/R_CreateJob.js",["114","115","116","117","118","119","120","121"],"import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport {\n  Drawer, CssBaseline, AppBar,\n  Toolbar, List, Typography,\n  Divider, IconButton, ListItem,\n  ListItemIcon, ListItemText,\n  Button, Paper, Container, Grid,\n  Avatar, TextField, Box, Link,\n  Checkbox, FormControlLabel\n} from '@material-ui/core';\nimport LockIcon from '@material-ui/icons/Lock';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport WorkIcon from '@material-ui/icons/Work';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport NaturePeopleIcon from '@material-ui/icons/NaturePeople';\nimport AssignmentIndIcon from '@material-ui/icons/AssignmentInd';\nimport axios from 'axios';\nimport Rating from '@material-ui/lab/Rating';\nimport { BrowserRouter as Router, useHistory } from 'react-router-dom';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0, 1),\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-end',\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: -drawerWidth,\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: 0,\n  },\n}));\n\nconst useStyles2 = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    '& > *': {\n      width: \"100%\",\n    },\n  },\n  paperContent: {\n    marginTop: theme.spacing(5),\n    marginBottom: theme.spacing(5),\n    marginLeft: theme.spacing(4),\n    marginRight: theme.spacing(4),\n  },\n}));\n\nconst useStyles3 = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.primary.main,\n  },\n  form: {\n    width: '100%',\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nconst Profile = () => {\n  const classes = useStyles3();\n\n  const [profileData, setProfileData] = useState([]);\n  const [toGetAxios, setToGetAxios] = useState(true);\n\n  const [addJob, setAddJob] = useState({\n    title: \" \",\n    recruiter: \n    {\n      id: \" \",\n      name: \" \",\n      email: \" \"\n    },\n    max_number_of_applications: 1000,\n    max_number_of_positions: 2,\n    deadline: \"2021-02-02\", \n    skills: [\"java\", \"python\"],\n    type_of_job: \"fulltime\",\n    duration: 6,\n    salary: 100202\n  });\n\n  if (toGetAxios) {\n    axios.get(`http://localhost:5000/recruiters/${sessionStorage.getItem('globalID')}`)\n      .then(res => {\n        setProfileData(res.data);\n        setToGetAxios(false);\n      });\n    console.log(profileData);\n  }\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    console.log(addJob);\n    axios.post(`http://localhost:5000/jobs/add`, addJob)\n      .then(response => console.log(response))\n      .catch(err => console.log(err));\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <WorkIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Add Job\n        </Typography>\n        <br />\n        <form className={classes.form}\n          noValidate\n          onSubmit={handleSubmit}\n        >\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"title\"\n                label=\"Title\"\n                id=\"title\"\n                onChange={event => {\n                  setAddJob({\n                    ...addJob,\n                    recruiter: \n                    {\n                      id: profileData?._id,\n                      name: profileData?.name,\n                      email: profileData?.email\n                    },\n                    title: event.target.value\n                  })\n                }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"max_number_of_positions\"\n                label=\"Maximum Number of Positions\"\n                id=\"max_number_of_positions\"\n                onChange={event => {\n                  setAddJob({\n                    ...addJob,\n                    recruiter: \n                    {\n                      ...addJob.recruiter\n                    },\n                    max_number_of_positions: event.target.value\n                  })\n                }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"max_number_of_applications\"\n                label=\"Maximum Number of Applications\"\n                id=\"max_number_of_applications\"\n                onChange={event => {\n                  setAddJob({\n                    ...addJob,\n                    recruiter: \n                    {\n                      ...addJob.recruiter\n                    },\n                    max_number_of_applications: event.target.value\n                  })\n                }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                id=\"deadline\"\n                label=\"Deadline\"\n                type=\"date\"\n                //defaultValue=\"2001-01-01\"\n                className={classes.textField}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                onChange={event => {\n                  setAddJob({\n                    ...addJob,\n                    recruiter: \n                    {\n                      ...addJob.recruiter\n                    },\n                    deadline: event.target.value\n                  })\n                }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"skills\"\n                label=\"Skills (comma separated)\"\n                id=\"skills\"\n                defaultValue=\"haskell, cpp, python\"\n                onChange={event => {\n                  setAddJob({\n                    ...addJob,\n                    recruiter: \n                    {\n                      ...addJob.recruiter\n                    },\n                    skills: event.target.value.split(',').map(element => element.trim())\n                  })\n                }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"type_of_job\"\n                label=\"Type of Job (fulltime / part-time / work from home)\"\n                id=\"type_of_job\"\n                onChange={event => {\n                  setAddJob({\n                    ...addJob,\n                    recruiter: \n                    {\n                      ...addJob.recruiter\n                    },\n                    type_of_job: event.target.value\n                  })\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"duration\"\n                label=\"Duration (0 - 6)\"\n                id=\"duration\"\n                onChange={event => {\n                  setAddJob({\n                    ...addJob,\n                    recruiter: \n                    {\n                      ...addJob.recruiter\n                    },\n                    duration: event.target.value\n                  })\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"salary\"\n                label=\"Salary (per month)\"\n                id=\"salary\"\n                onChange={event => {\n                  setAddJob({\n                    ...addJob,\n                    recruiter: \n                    {\n                      ...addJob.recruiter\n                    },\n                    salary: event.target.value\n                  })\n                }}\n              />\n            </Grid>\n          </Grid>\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            Submit\n          </Button>\n        </form>\n      </div>\n    </Container>\n  );\n};\n\nexport default function PersistentDrawerLeft() {\n  const classes = useStyles();\n  const classes2 = useStyles2();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n\n  const history = useHistory();\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  console.log('globalID = ' + sessionStorage.getItem('globalID'));\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, open && classes.hide)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            Create Job\n            {/*Dashboard, My Profile, My Applications*/}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          <ListItem button key=\"dashboard\"\n            onClick={() => {\n              history.push('/dashboard-recruiter');\n            }}\n          >\n            <ListItemIcon><DashboardIcon /></ListItemIcon>\n            <ListItemText primary=\"Dashboard\" />\n          </ListItem>\n          <ListItem button key=\"my_profile\"\n            onClick={() => {\n              history.push('/profile-recruiter');\n            }}\n          >\n            <ListItemIcon><NaturePeopleIcon /></ListItemIcon>\n            <ListItemText primary=\"My Profile\" />\n          </ListItem>\n        </List>\n        <Divider />\n        <List>\n        <ListItem button key=\"employees\"\n            onClick={() => {\n              history.push('/employees-recruiter');\n            }}\n          >\n            <ListItemIcon><AssignmentIndIcon /></ListItemIcon>\n            <ListItemText primary=\"My Employees\" />\n          </ListItem>\n          <ListItem button key='logout'\n            onClick={() => {\n              sessionStorage.setItem('globalID', '0');\n              history.push('/');\n            }}\n          >\n            <ListItemIcon><LockIcon /></ListItemIcon>\n            <ListItemText primary='Logout' />\n          </ListItem>\n        </List>\n      </Drawer>\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open,\n        })}\n      >\n        <div className={classes.drawerHeader} />\n\n        <Profile />\n\n      </main>\n    </div>\n  );\n}","/home/alapan/Documents/Projects/Openings/frontend/src/components/R_Dashboard.js",["122","123","124","125","126","127"],"import { React, useState } from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport {\n  Drawer, CssBaseline, AppBar,\n  Toolbar, List, Typography,\n  Divider, IconButton, ListItem,\n  ListItemIcon, ListItemText,\n  Button, Paper, Grid, TextField,\n  Dialog, DialogActions, DialogContent,\n  DialogTitle, DialogContentText\n} from '@material-ui/core';\nimport LockIcon from '@material-ui/icons/Lock';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport AssignmentIndIcon from '@material-ui/icons/AssignmentInd';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport NaturePeopleIcon from '@material-ui/icons/NaturePeople';\nimport AssignmentTurnedInIcon from '@material-ui/icons/AssignmentTurnedIn';\nimport axios from 'axios';\nimport { BrowserRouter as Router, useHistory } from 'react-router-dom';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0, 1),\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-end',\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: -drawerWidth,\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: 0,\n  },\n}));\n\nconst useStyles2 = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    '& > *': {\n      width: \"100%\",\n    },\n  },\n  paperContent: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n    marginLeft: theme.spacing(5),\n    marginRight: theme.spacing(5),\n  },\n}));\n\nconst useStyles3 = makeStyles((theme) =>({\n  root: {\n    minWidth: 800,\n  }\n}));\n\n\nexport default function PersistentDrawerLeft() {\n  const classes = useStyles();\n  const classes2 = useStyles2();\n  const classes3 = useStyles3();\n\n  const theme = useTheme();\n  const [open, setOpen] = useState(false);\n\n  const history = useHistory();\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const [jobData, setJobData] = useState([]);\n  const [toAxios, setToAxios] = useState(true);\n\n  if (toAxios)\n  {\n    axios.get('http://localhost:5000/jobs')\n      .then(res => {\n        setJobData(res.data);\n        setToAxios(false)\n      });\n    console.log(jobData);\n  };\n\n  const handleViewApp = (event, job) => {\n    event.preventDefault();\n    console.log(job._id + \": \" + job.title);\n    sessionStorage.setItem('jobID', job._id);\n    history.push('/recruiter/job_applications');\n  };\n\n  const [openApply, setOpenApply] = useState(false);\n  const [atJob, setAtJob] = useState({\n    id: \" \",\n    title: \" \"\n  });\n  const [editJob, setEditJob] = useState({\n    max_number_of_applications: 0,\n    max_number_of_positions: 0,\n    deadline: 0\n  });\n\n  const handleApplyClose = () => {\n    setOpenApply(false);\n  };\n\n  const handleMakeApply = () => {\n    console.log(atJob);\n    console.log(editJob);\n  \n    axios.post(`http://localhost:5000/jobs/update/${atJob.id}`, editJob)\n      .then(res => console.log(res))\n      .catch(err => console.log(err));\n    \n    handleApplyClose();\n    window.location.reload({forcedReload: false});\n  };\n\n  const handleEditJob = (job) => {\n    console.log(job._id + \": \" + job.title);\n    setAtJob({\n      id: job._id,\n      title: job.title\n    });\n    setOpenApply(true);\n  };\n\n  const handleDeleteJob = (job) => {\n    console.log(job._id + \": \" + job.title);\n\n    for (let i = 0; i < job?.applications?.length; i++)\n    {\n      axios.post(`http://localhost:5000/applicants/update/status/${job.applications[i].id}/${job._id}`, {\n        status: \"Job Deleted\"\n      })\n        .then(res => console.log(res))\n        .catch(err => console.log(err));\n    }\n\n    axios.delete(`http://localhost:5000/jobs/${job._id}`)\n      .then(res => console.log(res))\n      .catch(err => console.log(err));\n\n    window.location.reload({forcedReload: false});\n  };\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, open && classes.hide)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            Dashboard\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          <ListItem button key=\"profile\"\n            onClick={() => {\n              history.push('/profile-recruiter');\n            }}\n          >\n            <ListItemIcon><NaturePeopleIcon /></ListItemIcon>\n            <ListItemText primary=\"My Profile\" />\n          </ListItem>\n          <ListItem button key=\"create_job\"\n            onClick={() => {\n              history.push('/createjob-recruiter');\n            }}\n          >\n            <ListItemIcon><AssignmentTurnedInIcon /></ListItemIcon>\n            <ListItemText primary=\"Create Job\" />\n          </ListItem>\n        </List>\n        <Divider />\n        <List>\n          <ListItem button key=\"employees\"\n            onClick={() => {\n              history.push('/employees-recruiter');\n            }}\n          >\n            <ListItemIcon><AssignmentIndIcon /></ListItemIcon>\n            <ListItemText primary=\"My Employees\" />\n          </ListItem>\n          <ListItem button key='logout'\n            onClick={() => {\n              sessionStorage.setItem('globalID', '0');\n              history.push('/');\n            }}\n          >\n            <ListItemIcon><LockIcon /></ListItemIcon>\n            <ListItemText primary='Logout' />\n          </ListItem>\n        </List>\n      </Drawer>\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open,\n        })}\n      >\n        <div className={classes.drawerHeader} />\n        <Grid container className={classes3.root} spacing={4}>\n        {jobData?.map(job => {\n          if (job.recruiter.id === sessionStorage.getItem('globalID'))\n          return (\n            <Grid key={job._id} item>\n              <Paper elevation={6} style={{minWidth: 750}}>\n                <span style={{margin: '2rem'}}>\n                <div className={classes2.paperContent}>\n                  <h1>{job.title}</h1>\n                  <Typography variant={'subtitle1'}>\n                  <ul>\n                    <li><a style={{textDecorationLine: 'underline'}}>Date of Posting</a>: {(new Date(job.createdAt)).toDateString()}</li>\n                    <li><a style={{textDecorationLine: 'underline'}}>Number of Applicants</a>: {job?.applications?.length - job?.applications?.reduce(function(previousValue, currentObject) {\n                        return previousValue + (currentObject?.status === \"Rejected\" ? 1: 0); \n                      }, 0)}</li>\n                    <li><a style={{textDecorationLine: 'underline'}}>Remaining Number of Positions</a>: {\n                      job.max_number_of_positions -  job?.applications?.reduce(function(previousValue, currentObject) {\n                        return previousValue + (currentObject?.status?.substring(0, 3) === \"Acc\" ? 1: 0); \n                      }, 0)}</li>\n                  </ul>\n                  </Typography>\n                  <Grid container justify=\"flex-end\">\n                    <IconButton aria-label=\"delete\" color=\"secondary\"\n                      onClick={() => handleDeleteJob(job)}\n                    >\n                      <DeleteIcon />\n                    </IconButton>\n                    &nbsp; &nbsp;\n                    <IconButton aria-label=\"edit\" color=\"primary\"\n                      onClick={() => handleEditJob(job)}\n                    >\n                      <EditIcon />\n                    </IconButton>\n                    <Dialog open={openApply} onClose={handleApplyClose}\n                      aria-labelledby=\"form-dialog-title\"\n                    >\n                      <DialogTitle id=\"form-dialog-title\">Edit Job: {atJob.title}</DialogTitle>\n                      <DialogContent>\n                        <DialogContentText>\n                        </DialogContentText>\n                        <TextField\n                          id={`deadline ${atJob.id}`}\n                          label=\"Deadline\"\n                          type=\"date\"\n                          variant=\"outlined\"\n                          className={classes.textField}\n                          InputLabelProps={{\n                            shrink: true,\n                          }}\n                          onChange={event => {\n                            setEditJob({\n                              ...editJob,\n                              deadline: event.target.value\n                            });\n                          }}\n                        />\n                        <TextField\n                          autoFocus\n                          margin=\"dense\"\n                          id={`max app ${atJob.id}`}\n                          label=\"Maximum Number of Applications\"\n                          type=\"number\"\n                          fullWidth\n                          onChange={(event) => {\n                            setEditJob({\n                              ...editJob,\n                              max_number_of_applications: event.target.value\n                            });\n                          }}\n                        />\n                        <TextField\n                          autoFocus\n                          margin=\"dense\"\n                          id={`max pos ${atJob.id}`}\n                          label=\"Maximum Number of Positions\"\n                          type=\"number\"\n                          fullWidth\n                          onChange={(event) => {\n                            setEditJob({\n                              ...editJob,\n                              max_number_of_positions: event.target.value\n                            });\n                          }}\n                        />\n                      </DialogContent>\n                      <DialogActions>\n                        <Button onClick={handleApplyClose} color=\"primary\">\n                          Cancel\n                        </Button>\n                        <Button onClick={handleMakeApply} color=\"secondary\">\n                          Edit\n                        </Button>\n                      </DialogActions>\n                    </Dialog>\n                    &nbsp; &nbsp; &nbsp;\n                    <Button variant=\"contained\" style={{backgroundColor: '#ffbf57'}}\n                      onClick={(event) => handleViewApp(event, job)}\n                    >\n                      View Applications\n                    </Button>\n                  </Grid>\n                </div>\n                </span>\n              </Paper>\n            </Grid>\n          )\n        })}\n        </Grid>\n      </main>\n    </div>\n  );\n}","/home/alapan/Documents/Projects/Openings/frontend/src/components/R_JobApplicants.js",["128","129","130","131","132","133","134"],"import { React, useState } from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport {\n  Drawer, CssBaseline, AppBar,\n  Toolbar, List, Typography,\n  Divider, IconButton, ListItem,\n  ListItemIcon, ListItemText,\n  Button, Paper, Grid\n} from '@material-ui/core';\nimport LockIcon from '@material-ui/icons/Lock';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport NaturePeopleIcon from '@material-ui/icons/NaturePeople';\nimport Rating from '@material-ui/lab/Rating'\nimport AssignmentTurnedInIcon from '@material-ui/icons/AssignmentTurnedIn';\nimport axios from 'axios';\nimport { BrowserRouter as Router, useHistory } from 'react-router-dom';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0, 1),\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-end',\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: -drawerWidth,\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: 0,\n  },\n}));\n\nconst useStyles2 = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    '& > *': {\n      width: \"100%\",\n    },\n  },\n  paperContent: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n    marginLeft: theme.spacing(5),\n    marginRight: theme.spacing(5),\n  },\n}));\n\nconst useStyles3 = makeStyles((theme) => ({\n  root: {\n    minWidth: 800,\n  }\n}));\n\nexport default function PersistentDrawerLeft() {\n  const classes = useStyles();\n  const classes2 = useStyles2();\n  const classes3 = useStyles3();\n\n  const theme = useTheme();\n  const [open, setOpen] = useState(false);\n\n  const history = useHistory();\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const [jobData, setJobData] = useState([]);\n  const [appData, setAppData] = useState([]);\n  const [toAxios, setToAxios] = useState(true);\n  const [toAxios2, setToAxios2] = useState(true);\n\n  if (toAxios)\n  {\n    axios.get(`http://localhost:5000/jobs/${sessionStorage.getItem('jobID')}`)\n      .then(res => {\n        setJobData(res.data);\n        setToAxios(false);\n      })\n      .catch(err => console.log(err));\n    \n    console.log(jobData);\n  };\n  \n  if (toAxios2)\n  {\n    axios.get(`http://localhost:5000/applicants`)\n    .then(res => {\n      setAppData(res.data);\n      setToAxios2(false);\n    })\n    .catch(err => console.log(err));\n    \n    console.log(appData);\n  }\n\n  const handleShortlist = (app) => {\n    console.log(app._id + \"::: \" + app.name)\n    axios.post(`http://localhost:5000/jobs/update/status/${sessionStorage.getItem('jobID')}/${app._id}`, {\n      status: \"Shortlisted\"\n    })\n      .then(res => console.log(res))\n      .catch(err => console.log(err));\n\n    axios.post(`http://localhost:5000/applicants/update/status/${app._id}/${sessionStorage.getItem('jobID')}`, {\n      status: \"Shortlisted\"\n    })\n      .then(res => console.log(res))\n      .catch(err => console.log(err));\n    \n    window.location.reload({forcedReload: false});\n  };\n\n  const handleAccept = (app) => {\n    console.log(app._id + \"::: \" + app.name)\n    axios.post(`http://localhost:5000/jobs/update/status/${sessionStorage.getItem('jobID')}/${app._id}`, {\n      status: \"Accepted\"\n    })\n      .then(res => console.log(res))\n      .catch(err => console.log(err));\n\n    axios.post(`http://localhost:5000/applicants/update/status/${app._id}/${sessionStorage.getItem('jobID')}`, {\n      status: \"Accepted\"\n    })\n      .then(res => console.log(res))\n      .catch(err => console.log(err));\n    \n    window.location.reload({forcedReload: false});\n  };\n\n  const handleReject = (app) => {\n    console.log(app._id + \"::: \" + app.name)\n    axios.post(`http://localhost:5000/jobs/update/status/${sessionStorage.getItem('jobID')}/${app._id}`, {\n      status: \"Rejected\"\n    })\n      .then(res => console.log(res))\n      .catch(err => console.log(err));\n\n    axios.post(`http://localhost:5000/applicants/update/status/${app._id}/${sessionStorage.getItem('jobID')}`, {\n      status: \"Rejected\"\n    })\n      .then(res => console.log(res))\n      .catch(err => console.log(err));\n    \n    window.location.reload({forcedReload: false});\n  };\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, open && classes.hide)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            {jobData?.title + \" Applicants\"}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          <ListItem button key=\"dashboard\"\n            onClick={() => {\n              sessionStorage.setItem('jobID', '0');\n              history.push('/dashboard-recruiter');\n            }}\n          >\n            <ListItemIcon><ArrowBackIcon /></ListItemIcon>\n            <ListItemText primary=\"Back to Dashboard\" />\n          </ListItem>\n        </List>\n        <Divider />\n        <List>\n          <ListItem button key='logout'\n            onClick={() => {\n              sessionStorage.setItem('globalID', '0');\n              sessionStorage.setItem('jobID', '0');\n              history.push('/');\n            }}\n          >\n            <ListItemIcon><LockIcon /></ListItemIcon>\n            <ListItemText primary='Logout' />\n          </ListItem>\n        </List>\n      </Drawer>\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open,\n        })}\n      >\n        <div className={classes.drawerHeader} />\n        <Grid container className={classes3.root} spacing={4}>\n        {appData?.map(app => {\n          for(let i = 0; i < app?.applications?.length; i++)\n          {\n            //console.log(app?.applications[i]?.id + \": \" + app?.applications[i]?.title);\n            if ((app?.applications[i]?.id === sessionStorage.getItem('jobID')) && (app?.applications[i]?.status !== \"Rejected\"))\n            return (\n              <Grid key={app?._id} item>\n                <Paper elevation={6} style={{minWidth: 750}}>\n                  <span style={{margin: '2rem'}}>\n                  <div className={classes2.paperContent}>\n                    <h1>{app.name}</h1>\n                    {(app?.total_number_of_ratings !== 0) ?\n                    <Rating name=\"read-only\" value={app?.total_rating/app?.total_number_of_ratings} readOnly />\n                    :\n                    <Typography variant={'subtitle1'} style={{fontWeight: 'bold'}}>Unrated</Typography>}\n                    <Typography variant={'subtitle1'}>\n                    <ul>\n                      <li>Skills: {app?.skills?.join(\", \")}</li>\n                      <li>Date of Application: {app?.updatedAt.substring(0, 10)}</li>\n                      <li>Education: {app?.education?.institute + \" (\" + app?.education?.start_year?.substring(0, 4) + \" to \" + app?.education?.end_year?.substring(0, 4) + \")\"}</li>\n                      <li>SOP: {jobData?.applications?.map(post => {\n                        if (post?.id === app?._id)\n                        return (<a key={post.id}>{post?.SOP}</a>);\n                      })}</li>\n                      <li>Stage of Application: {app?.applications[i]?.status}</li>\n                    </ul>\n                    </Typography>\n                    <Grid container justify=\"flex-end\">\n                      {\n                        // Applied, Shortlisted, Rejected, Accepted\n                        (app?.applications[i]?.status === \"Applied\")?\n                          <div>\n                          <Button variant=\"contained\" color=\"primary\"\n                            onClick={() => handleShortlist(app)}\n                          >\n                            Shortlist\n                          </Button>\n                          &nbsp; &nbsp;\n                          <Button variant=\"contained\" color=\"secondary\"\n                            onClick={() => handleReject(app)}\n                          >\n                            Reject\n                          </Button>\n                          </div>\n                        :\n                          (app?.applications[i]?.status === \"Shortlisted\")?\n                            <div>\n                            <Button variant=\"contained\" color=\"primary\"\n                              onClick={() => handleAccept(app)}\n                            >\n                              Accept\n                            </Button>\n                            &nbsp; &nbsp;\n                            <Button variant=\"contained\" color=\"secondary\"\n                              onClick={() => handleReject(app)}\n                            >\n                              Reject\n                            </Button>\n                            </div>\n                          :\n                            <Button variant=\"contained\" disabled>\n                              Accepted\n                            </Button>\n                      }\n                    </Grid>\n                  </div>\n                  </span>\n                </Paper>\n              </Grid>\n            );\n          }\n        })}\n        </Grid>\n      </main>\n    </div>\n  );\n}",{"ruleId":"135","severity":1,"message":"136","line":23,"column":7,"nodeType":"137","endLine":23,"endColumn":19},{"ruleId":"135","severity":1,"message":"138","line":27,"column":7,"nodeType":"137","endLine":27,"endColumn":19},{"ruleId":"135","severity":1,"message":"139","line":31,"column":7,"nodeType":"137","endLine":31,"endColumn":22},{"ruleId":"135","severity":1,"message":"140","line":35,"column":7,"nodeType":"137","endLine":35,"endColumn":20},{"ruleId":"135","severity":1,"message":"141","line":39,"column":7,"nodeType":"137","endLine":39,"endColumn":25},{"ruleId":"135","severity":1,"message":"142","line":43,"column":7,"nodeType":"137","endLine":43,"endColumn":20},{"ruleId":"135","severity":1,"message":"143","line":47,"column":7,"nodeType":"137","endLine":47,"endColumn":22},{"ruleId":"135","severity":1,"message":"144","line":51,"column":7,"nodeType":"137","endLine":51,"endColumn":22},{"ruleId":"135","severity":1,"message":"145","line":55,"column":7,"nodeType":"137","endLine":55,"endColumn":26},{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","severity":1,"message":"151","line":1,"column":27,"nodeType":"152","messageId":"153","endLine":1,"endColumn":36},{"ruleId":"150","severity":1,"message":"154","line":4,"column":15,"nodeType":"152","messageId":"153","endLine":4,"endColumn":18},{"ruleId":"150","severity":1,"message":"155","line":5,"column":15,"nodeType":"152","messageId":"153","endLine":5,"endColumn":29},{"ruleId":"150","severity":1,"message":"156","line":8,"column":27,"nodeType":"152","messageId":"153","endLine":8,"endColumn":33},{"ruleId":"150","severity":1,"message":"157","line":8,"column":35,"nodeType":"152","messageId":"153","endLine":8,"endColumn":43},{"ruleId":"150","severity":1,"message":"158","line":8,"column":45,"nodeType":"152","messageId":"153","endLine":8,"endColumn":50},{"ruleId":"150","severity":1,"message":"159","line":6,"column":8,"nodeType":"152","messageId":"153","endLine":6,"endColumn":24},{"ruleId":"150","severity":1,"message":"160","line":7,"column":8,"nodeType":"152","messageId":"153","endLine":7,"endColumn":16},{"ruleId":"150","severity":1,"message":"154","line":10,"column":8,"nodeType":"152","messageId":"153","endLine":10,"endColumn":11},{"ruleId":"150","severity":1,"message":"151","line":1,"column":27,"nodeType":"152","messageId":"153","endLine":1,"endColumn":36},{"ruleId":"150","severity":1,"message":"154","line":4,"column":15,"nodeType":"152","messageId":"153","endLine":4,"endColumn":18},{"ruleId":"150","severity":1,"message":"159","line":4,"column":33,"nodeType":"152","messageId":"153","endLine":4,"endColumn":49},{"ruleId":"150","severity":1,"message":"160","line":4,"column":51,"nodeType":"152","messageId":"153","endLine":4,"endColumn":59},{"ruleId":"150","severity":1,"message":"155","line":5,"column":15,"nodeType":"152","messageId":"153","endLine":5,"endColumn":29},{"ruleId":"150","severity":1,"message":"156","line":8,"column":27,"nodeType":"152","messageId":"153","endLine":8,"endColumn":33},{"ruleId":"150","severity":1,"message":"157","line":8,"column":35,"nodeType":"152","messageId":"153","endLine":8,"endColumn":43},{"ruleId":"150","severity":1,"message":"158","line":8,"column":45,"nodeType":"152","messageId":"153","endLine":8,"endColumn":50},{"ruleId":"150","severity":1,"message":"161","line":1,"column":8,"nodeType":"152","messageId":"153","endLine":1,"endColumn":13},{"ruleId":"150","severity":1,"message":"162","line":12,"column":16,"nodeType":"152","messageId":"153","endLine":12,"endColumn":32},{"ruleId":"150","severity":1,"message":"163","line":16,"column":8,"nodeType":"152","messageId":"153","endLine":16,"endColumn":21},{"ruleId":"150","severity":1,"message":"156","line":23,"column":27,"nodeType":"152","messageId":"153","endLine":23,"endColumn":33},{"ruleId":"150","severity":1,"message":"164","line":9,"column":11,"nodeType":"152","messageId":"153","endLine":9,"endColumn":16},{"ruleId":"150","severity":1,"message":"154","line":10,"column":22,"nodeType":"152","messageId":"153","endLine":10,"endColumn":25},{"ruleId":"150","severity":1,"message":"165","line":10,"column":27,"nodeType":"152","messageId":"153","endLine":10,"endColumn":31},{"ruleId":"150","severity":1,"message":"160","line":11,"column":3,"nodeType":"152","messageId":"153","endLine":11,"endColumn":11},{"ruleId":"150","severity":1,"message":"159","line":11,"column":13,"nodeType":"152","messageId":"153","endLine":11,"endColumn":29},{"ruleId":"150","severity":1,"message":"166","line":19,"column":8,"nodeType":"152","messageId":"153","endLine":19,"endColumn":24},{"ruleId":"150","severity":1,"message":"156","line":23,"column":27,"nodeType":"152","messageId":"153","endLine":23,"endColumn":33},{"ruleId":"167","severity":1,"message":"168","line":214,"column":21,"nodeType":"169","messageId":"170","endLine":214,"endColumn":23},{"ruleId":"167","severity":1,"message":"168","line":241,"column":21,"nodeType":"169","messageId":"170","endLine":241,"endColumn":23},{"ruleId":"150","severity":1,"message":"171","line":296,"column":9,"nodeType":"152","messageId":"153","endLine":296,"endColumn":17},{"ruleId":"150","severity":1,"message":"172","line":20,"column":8,"nodeType":"152","messageId":"153","endLine":20,"endColumn":30},{"ruleId":"150","severity":1,"message":"156","line":22,"column":27,"nodeType":"152","messageId":"153","endLine":22,"endColumn":33},{"ruleId":"173","severity":1,"message":"174","line":282,"column":50,"nodeType":"175","messageId":"176","endLine":282,"endColumn":52},{"ruleId":"150","severity":1,"message":"164","line":9,"column":11,"nodeType":"152","messageId":"153","endLine":9,"endColumn":16},{"ruleId":"150","severity":1,"message":"154","line":10,"column":22,"nodeType":"152","messageId":"153","endLine":10,"endColumn":25},{"ruleId":"150","severity":1,"message":"165","line":10,"column":27,"nodeType":"152","messageId":"153","endLine":10,"endColumn":31},{"ruleId":"150","severity":1,"message":"160","line":11,"column":3,"nodeType":"152","messageId":"153","endLine":11,"endColumn":11},{"ruleId":"150","severity":1,"message":"159","line":11,"column":13,"nodeType":"152","messageId":"153","endLine":11,"endColumn":29},{"ruleId":"150","severity":1,"message":"177","line":22,"column":8,"nodeType":"152","messageId":"153","endLine":22,"endColumn":14},{"ruleId":"150","severity":1,"message":"156","line":23,"column":27,"nodeType":"152","messageId":"153","endLine":23,"endColumn":33},{"ruleId":"150","severity":1,"message":"171","line":224,"column":9,"nodeType":"152","messageId":"153","endLine":224,"endColumn":17},{"ruleId":"150","severity":1,"message":"164","line":9,"column":11,"nodeType":"152","messageId":"153","endLine":9,"endColumn":16},{"ruleId":"150","severity":1,"message":"154","line":10,"column":22,"nodeType":"152","messageId":"153","endLine":10,"endColumn":25},{"ruleId":"150","severity":1,"message":"165","line":10,"column":27,"nodeType":"152","messageId":"153","endLine":10,"endColumn":31},{"ruleId":"150","severity":1,"message":"160","line":11,"column":3,"nodeType":"152","messageId":"153","endLine":11,"endColumn":11},{"ruleId":"150","severity":1,"message":"159","line":11,"column":13,"nodeType":"152","messageId":"153","endLine":11,"endColumn":29},{"ruleId":"150","severity":1,"message":"177","line":22,"column":8,"nodeType":"152","messageId":"153","endLine":22,"endColumn":14},{"ruleId":"150","severity":1,"message":"156","line":23,"column":27,"nodeType":"152","messageId":"153","endLine":23,"endColumn":33},{"ruleId":"150","severity":1,"message":"171","line":358,"column":9,"nodeType":"152","messageId":"153","endLine":358,"endColumn":17},{"ruleId":"150","severity":1,"message":"163","line":16,"column":8,"nodeType":"152","messageId":"153","endLine":16,"endColumn":21},{"ruleId":"150","severity":1,"message":"156","line":24,"column":27,"nodeType":"152","messageId":"153","endLine":24,"endColumn":33},{"ruleId":"173","severity":1,"message":"174","line":285,"column":27,"nodeType":"175","messageId":"176","endLine":285,"endColumn":29},{"ruleId":"178","severity":1,"message":"179","line":295,"column":25,"nodeType":"137","endLine":295,"endColumn":70},{"ruleId":"178","severity":1,"message":"179","line":296,"column":25,"nodeType":"137","endLine":296,"endColumn":70},{"ruleId":"178","severity":1,"message":"179","line":299,"column":25,"nodeType":"137","endLine":299,"endColumn":70},{"ruleId":"150","severity":1,"message":"163","line":13,"column":8,"nodeType":"152","messageId":"153","endLine":13,"endColumn":21},{"ruleId":"150","severity":1,"message":"166","line":17,"column":8,"nodeType":"152","messageId":"153","endLine":17,"endColumn":24},{"ruleId":"150","severity":1,"message":"172","line":19,"column":8,"nodeType":"152","messageId":"153","endLine":19,"endColumn":30},{"ruleId":"150","severity":1,"message":"156","line":21,"column":27,"nodeType":"152","messageId":"153","endLine":21,"endColumn":33},{"ruleId":"173","severity":1,"message":"174","line":272,"column":27,"nodeType":"175","messageId":"176","endLine":272,"endColumn":29},{"ruleId":"173","severity":1,"message":"174","line":292,"column":65,"nodeType":"175","messageId":"176","endLine":292,"endColumn":67},{"ruleId":"178","severity":1,"message":"179","line":294,"column":33,"nodeType":"137","endLine":294,"endColumn":50},"react/jsx-pascal-case","Imported JSX component R_SignUp must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component A_SignUp must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component A_Dashboard must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component A_Profile must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component A_Applications must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component R_Profile must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component R_CreateJob must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component R_Dashboard must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component R_JobApplicants must be in PascalCase or SCREAMING_SNAKE_CASE","no-native-reassign",["180"],"no-negated-in-lhs",["181"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Box' is defined but never used.","'StylesProvider' is defined but never used.","'Router' is defined but never used.","'Redirect' is defined but never used.","'Route' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'React' is defined but never used.","'TextareaAutosize' is defined but never used.","'DashboardIcon' is defined but never used.","'Paper' is defined but never used.","'Link' is defined but never used.","'NaturePeopleIcon' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'classes2' is assigned a value but never used.","'AssignmentTurnedInIcon' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'Rating' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation"]